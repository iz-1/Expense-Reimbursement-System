{"version":3,"sources":["Model/Employee.tsx","Model/Expense.tsx","Model/Manager.tsx","Model/Reimbursement.tsx","MockDao/MockDao.tsx","Components/Login/Login.tsx","Components/Sidebar/Sidebar.js","Components/SidebarManager/SidebarManager.js","Components/Spinner.tsx","Components/RequestCreate/RequestCreateLine.tsx","Components/DateBadge/DateBadge.tsx","Components/RequestReview/RequestReview.tsx","Components/RequestsViewAll/RequestsViewAllListEntry.tsx","Components/RequestsViewAll/RequestsViewAllList.tsx","SearchEntries.tsx","Components/RequestsViewAll/RequestsViewAll.tsx","Components/EmployeesView/EmployeesViewListEntry.tsx","Components/EmployeesView/EmployeesViewList.tsx","Components/EmployeesView/EmployeesView.tsx","Components/EmployeeCreate/EmployeeCreateForm.tsx","Components/EmployeeCreate/EmployeeCreate.tsx","Components/ModelView/ModelView.tsx","Components/ProfileView/ProfileView.tsx","Components/PasswordReset/PasswordReset.tsx","Components/RequestCreate/RequestCreateForm.js","Components/RequestCreate/RequestCreate.tsx","Components/Success.tsx","Components/ProfileView/ProfileViewUpdateSuccess.tsx","Components/Logout/Logout.tsx","Components/RequestViewByEmployee/RequestViewByEmployee.tsx","Components/NoRequests.tsx","Components/ManagerHome.tsx","Components/EmployeeHome.tsx","App.js","reportWebVitals.js","index.js"],"names":["Employee","firstName","lastName","email","address","phoneNumber","password","type","requestIds","id","this","Expense","description","cost","date","Manager","Reimbursement","expenses","requester","status","startDate","endDate","total","forEach","e","MockDao","getDummyEmployee","console","log","getDummyRequest","result","getDummyRequests","callbackSet","createObject","prepObject","setTimeout","undefined","loadDelay","data","callback","loginCredientials","axios","url","then","response","catch","error","appSetStateCb","localStorage","removeItem","setItem","JSON","stringify","parse","getItem","searchParams","postParams","post","headers","res","json","err","Login","props","loginRef","useRef","passRef","handleClick","preventDefault","buttonId","target","login","current","value","getDao","storeCredentials","user","map","setUser","className","ref","defaultValue","onClick","Sidebar","getCurrentUserId","to","SidebarManager","Spinner","history","useHistory","useEffect","path","push","logoutCb","logout","title","RequestCreateLine","expense","amount","handleSubmit","DateBadge","Date","toLocaleString","month","getDay","getFullYear","getElement","RequestReview","useParams","useState","setResult","req","getApprovalForm","request","reviewerId","Object","keys","length","elements","i","formatDate","toLocaleDateString","timeZone","formatAmt","parseInt","toFixed","formatTotal","Number","requesterId","getItems","RequestsViewAllListEntry","innerHTML","pathname","isOwner","hexId","RequestsViewAllList","empId","owner","getTitle","requestData","formdata","items","element","index","handleSearch","evt","sourcedata","setResultCb","isUser","toString","filtered","expr","RegExp","filter","properties","phone","getPropList","values","val","test","RequestsViewAll","empFlag","reinbursements","reinbursementsDisplay","setResultDisplay","setData","empReq","placeholder","onChange","EmployeesViewListEntry","entry","showRow","phoneNumberString","cleaned","replace","match","formatPhoneNumber","EmployeesViewList","d","EmployeesView","employees","employeesDisplay","emp","loadedEmployees","EmployeeCreateForm","formDetails","textInputs","results","onSubmit","autocomplete","entries","key","keyName","charAt","toUpperCase","slice","inputType","pattern","name","required","getView","EmployeeCreate","newUser","handleResult","state","detail","x","getNewEmployee","command","cmdType","postDao","blank","ModelView","disabledInput","htmlFor","disabled","ProfileView","removeFields","profileData","isMgr","getIsManager","mgr","PasswordReset","pass","confirm","form","displayResult","confirmPass","alert","reset","minLength","autoComplete","RequestCreateForm","dateInput","textInput","amountInput","formRef","listItems","setItems","setTotal","setStartDate","setEndDate","listSize","setSize","expensesList","readExpense","getValues","stack","listNode","pop","removeEntry","spanObj","event","object","toISOString","split","min","step","checkValidity","getTime","isNaN","parseFloat","reportValidity","addItem","finalEntryKey","RequestCreate","removeAtributes","getObject","getNewRequest","Success","location","useLocation","ProfileViewUpdateSuccess","Logout","RequestViewByEmployee","loggedId","NoRequests","ManagerHome","component","EmployeeViewUpdateSuccess","EmployeeHome","App","called","useConstructor","setLogOutCallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8aa09ce.chunk.js","sourcesContent":["export default class Employee {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    address: string;\r\n    phoneNumber: number;\r\n    password: string;\r\n    type: string;\r\n    requestIds: number[];\r\n    id: string;\r\n\r\n  constructor(\r\n    firstName: string = '', \r\n    lastName: string  = '', \r\n    email: string = '', \r\n    address: string  = '', \r\n    phoneNumber: number = 0, \r\n    password: string = '', \r\n    type: string = 'Employee', \r\n    requestIds: number[] = [],\r\n    id: string = ''\r\n) {\r\n    this.firstName = firstName\r\n    this.lastName = lastName\r\n    this.email = email\r\n    this.address = address\r\n    this.phoneNumber = phoneNumber\r\n    this.password = password\r\n    this.type = type\r\n    this.requestIds = requestIds    \r\n    this.id = id\r\n  }\r\n}","export default class Expense {\r\n    description: string = '';\r\n    cost: number = 0;\r\n    date: string = '';\r\n\r\n  constructor(description: string , cost: number , date: string ) {\r\n    this.description = description\r\n    this.cost = cost\r\n    this.date = date\r\n  }\r\n\r\n}","import Employee from \"./Employee\";\r\n\r\nexport default class Manager extends Employee {\r\n    constructor(\r\n        firstName: string , \r\n        lastName: string  , \r\n        email: string , \r\n        address: string  , \r\n        phoneNumber: number  , \r\n        password: string , \r\n        type: string , \r\n        requestIds: number[] \r\n    ) {\r\n        super(firstName, lastName, email, address, phoneNumber, password, \"Manager\", requestIds);\r\n    }    \r\n}","import Expense from \"./Expense\";\r\n\r\nexport default class Reimbursement {\r\n    expenses: Expense[];\r\n    requester: string;\r\n    status: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    id: string;\r\n    total: number;\r\n\r\n  constructor(\r\n    expenses: Expense[] = [], \r\n    requester: string = '',\r\n    status: string = '', \r\n    startDate: string = '', \r\n    endDate: string = '',\r\n    id: string = '',\r\n    total: number = 0\r\n) {\r\n    this.expenses = expenses\r\n    this.requester = requester\r\n    this.status = status\r\n    this.startDate = startDate\r\n    this.endDate = endDate\r\n    this.id = id\r\n    this.total = total\r\n\r\n    //@ts-ignore\r\n    expenses.forEach((e) => {\r\n      this.total += e.cost;\r\n    });\r\n  }\r\n\r\n}","import axios, { AxiosError } from 'axios';\r\nimport Employee from '../Model/Employee';\r\nimport Expense from '../Model/Expense';\r\nimport Manager from '../Model/Manager';\r\nimport Reimbursement from '../Model/Reimbursement';\r\n\r\nexport default class MockDao {\r\n    static loadDelay: number = 200 //1200\r\n    static url: string = 'http://localhost:8888'\r\n    static appSetStateCb: (data: any) => void\r\n\r\n    static getNewEmployee() {\r\n        return new Employee()\r\n    }\r\n\r\n    static getNewRequest() {\r\n        return new Reimbursement()\r\n    }\r\n\r\n    static getDummyEmployee() {\r\n        return new Employee('first', 'last', 'abc@abc.com', '123 street', 123456890, 'password', 'Employee', [], '0')\r\n    }\r\n\r\n    static getDummyEmployees() {\r\n        let employees = [\r\n            MockDao.getDummyEmployee(),\r\n            MockDao.getDummyEmployee(),\r\n            MockDao.getDummyEmployee()\r\n        ]\r\n        return employees;\r\n    }\r\n\r\n    static getDummyManager() {\r\n        return new Manager('boss', 'man', 'daboss@abc.com', '111 street', 123456890, 'password', 'Employee', [])\r\n    }\r\n\r\n    static getDummyRequest() {\r\n        let expenses = [\r\n            new Expense(\"drink\", 200, \"5-5-21\"),\r\n            new Expense(\"pizza\", 200, \"5-5-21\"),\r\n            new Expense(\"chips\", 200, \"5-5-21\")\r\n        ];\r\n        return new Reimbursement(expenses, '100', 'pending', '5-5-21', '5-5-21', '0')\r\n    }\r\n\r\n    static getDummyRequests() {\r\n        console.log('getdummyrequests')\r\n        let requests = [\r\n            MockDao.getDummyRequest(),\r\n            MockDao.getDummyRequest(),\r\n            MockDao.getDummyRequest()\r\n        ]\r\n\r\n        return requests\r\n    }\r\n\r\n    static getDummyEmployeeRequests(id?: string) {\r\n        /*mock*/ \r\n        let result = MockDao.getDummyRequests()\r\n        console.log(result)\r\n        return result\r\n    }\r\n\r\n    static getObject(callbackSet: any, createObject: () => any, prepObject?: (obj: any) => void) {\r\n        setTimeout(() => {\r\n            let e = createObject()\r\n            if(prepObject !== undefined)\r\n                prepObject(e)\r\n            //console.log('getobject:' + e)\r\n            callbackSet(e)\r\n        }, MockDao.loadDelay)\r\n    }\r\n\r\n    static retriveResult(data: any){\r\n        return data;\r\n    }\r\n\r\n    static getEmployeeByEmail(email: string) {\r\n        //return MockDao.getDao({emp: email})\r\n    }\r\n\r\n    // static getAllEmployees() {\r\n    //     //return MockDao.getDao({\"emp\": \"abc@abc.com\"})\r\n    //     //return MockDao.getDaoShort( {\"emp\": \"abc@abc.com\"} )\r\n    //     return MockDao.getDaoQuick()\r\n    // }\r\n\r\n    static async login(callback: (data: any) => void, loginCredientials: {}) {\r\n        axios({\r\n            \"method\": \"GET\", //  \"GET/POST\"\r\n            \"url\": MockDao.url,\r\n            \"params\": loginCredientials\r\n        })\r\n        .then((response) => {\r\n            console.log(response.status)\r\n            if(response.status === 200)\r\n            {\r\n                console.log(response.data)\r\n                callback(response.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            console.log(error)\r\n        })        \r\n\r\n        /*\r\n        const API_URL = \"http\"\r\n        return axios\r\n            .post(MockDao.authUrl, {email, password})\r\n            .then(response => {\r\n                if(response.data.accessToken) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(response.data))\r\n                }\r\n                return response.data\r\n            })\r\n            */\r\n    }\r\n\r\n    static setLogOutCallback(callback: (data: any) => void) {\r\n        MockDao.appSetStateCb = callback;\r\n    }\r\n\r\n    static logout(){\r\n        localStorage.removeItem('user')\r\n        localStorage.removeItem('isManager')\r\n        MockDao.appSetStateCb(null)\r\n    }\r\n\r\n    static setUser(result: any) {\r\n        localStorage.setItem('user', JSON.stringify(result))\r\n    }\r\n\r\n    static getCurrentUserId(){\r\n        //@ts-ignore\r\n        const data = JSON.parse(localStorage.getItem('user'))\r\n        return data.id\r\n        // const user = JSON.parse(localStorage.getItem('user'))\r\n        // return user.hexId\r\n    }\r\n\r\n    static getIsManager(): boolean {\r\n        //@ts-ignore\r\n        const data = JSON.parse(localStorage.getItem('user'))\r\n        return (data.type === 'Manager')\r\n    }\r\n\r\n    // static async getDaoQuick() {\r\n    //     await axios.get(MockDao.url + \"?emp=abc@abc.com\")\r\n    //     .then(response => {\r\n    //         return response.data\r\n    //     })\r\n    // }\r\n\r\n    // static async getDaoShort(callback: (data: any) => void, searchParams: object) {\r\n    //     console.log(searchParams)\r\n    //     try {\r\n    //         //@ts-ignore\r\n    //         let res = await axios.get(MockDao.url, searchParams)   \r\n    //         if(res.status == 200)\r\n    //             callback(res.data)\r\n            \r\n    //     }catch(error) {\r\n    //         console.log(error)\r\n    //     }        \r\n    // }\r\n\r\n    static async getDao(callback: (data: any) => void, searchParams: object) {\r\n        //console.log(`getDao: ${searchParams}`)\r\n        // \"params\": { \"emp\": \"abc@abc.com\"}\r\n        //@ts-ignore\r\n        axios({\r\n            \"method\": \"GET\", //  \"GET/POST\"\r\n            \"url\": MockDao.url,\r\n            \"params\": searchParams\r\n        })\r\n        .then((response) => {\r\n            console.log(response.status)\r\n            if(response.status === 200)\r\n            {\r\n                console.log(JSON.stringify(response.data))\r\n                callback(response.data)\r\n            }\r\n            //console.log(response)\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            console.log(error)\r\n        })        \r\n    }\r\n\r\n    static async postDao(callback: (data: any) => void, postParams: object) {\r\n        //@todo loggin\r\n        console.log(`postDao: ${postParams}`)\r\n        \r\n        await axios.post(MockDao.url, postParams, {\r\n            headers: { \r\n                'Content-Type': 'application/json'}\r\n        })\r\n        .then( res => {\r\n            console.log(res.status)\r\n            if(res.status === 200) {\r\n                console.log(res.data.json)\r\n                callback(res.data.json)\r\n            }\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}","import { Fragment, useRef } from \"react\"\r\nimport MockDao from \"../../MockDao/MockDao\"\r\nimport './Login.css'\r\n\r\nexport default function Login(props:any) {\r\n    let loginRef = useRef<HTMLInputElement>(null)\r\n    let passRef = useRef<HTMLInputElement>(null)\r\n\r\n    const handleClick = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n\r\n        const buttonId: string = (e.target as any).id\r\n        const login: string = loginRef.current!.value\r\n        const password: string = passRef.current!.value\r\n\r\n        MockDao.getDao(storeCredentials, {[buttonId]: login, password: password})\r\n    }\r\n\r\n    function storeCredentials(result: any){\r\n        let user = result.map\r\n        MockDao.setUser(user)\r\n        props.callback(user)\r\n    }\r\n\r\n    // function getLoginPassInputs() {\r\n    //     return(\r\n    //         <Fragment>\r\n    //         <li><input ref={loginRef} type='text' placeholder='login...'></input></li>\r\n    //         <li><input ref={passRef} type='text' placeholder='password...'></input></li>           \r\n    //         </Fragment>\r\n    //     )\r\n    // }\r\n\r\n    function getDebugLoginPassInputs() {\r\n        return(\r\n            <Fragment>\r\n            <li><input ref={loginRef} type='text' defaultValue='abc@abc.com'></input></li>\r\n            <li><input ref={passRef} type='text' defaultValue='pass'></input></li>     \r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    function getInputFields() {\r\n        return (\r\n            <ul>\r\n            {\r\n            //getLoginPassInputs()\r\n            getDebugLoginPassInputs()\r\n            }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"Login\">\r\n            <h2>Reinbursement Portal</h2>\r\n            <form>\r\n                {getInputFields()}\r\n                <div className=\"loginButtons\">\r\n                    <button onClick={handleClick} id='login'>Employee Login</button>\r\n                    <button onClick={handleClick} id='mgrLogin'>Manager Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {Link} from 'react-router-dom';\r\nimport MockDao from '../../MockDao/MockDao'\r\nimport './Sidebar.css';\r\n\r\nexport default function Sidebar(props) {\r\n    //let user = \"/ProfileView/6097753963a78c2f8dff6f47\"\r\n\r\n    let id = MockDao.getCurrentUserId()\r\n\r\n    return (\r\n        <div className=\"Sidebar\">\r\n            <ul>            \r\n            <li><Link to=\"/RequestCreate\" className=\"nounderline\">Request</Link></li>\r\n            <li><Link to={\"/RequestViewByEmployee/\" + id} className=\"nounderline\">Home</Link></li>\r\n            <li><hr/></li>\r\n            <li><Link to={\"/ProfileView\"} className=\"nounderline\">Profile</Link></li>\r\n            <li><Link to=\"/PasswordReset\" className=\"nounderline\">Password Reset</Link></li>\r\n            <li><hr/></li>\r\n            <li><Link to=\"/Logout\" className=\"nounderline\">Logout</Link></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}","import {Link} from 'react-router-dom';\r\nimport './SidebarManager.css';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function SidebarManager(props) {\r\n    return (\r\n        <div className=\"SidebarManager\">\r\n            <ul>            \r\n            <li><Link to=\"/RequestsViewAll/all\" className='nounderline'>Requests</Link></li>                  \r\n            <li><Link to=\"/EmployeesView\" className='nounderline'>Employees</Link></li>\r\n            <li><Link to=\"/EmployeeCreate\" className='nounderline'>Create Employee</Link></li>\r\n            </ul>\r\n            <Sidebar user={props.user}/>\r\n        </div>\r\n    );\r\n}","import { useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport MockDao from \"../MockDao/MockDao\"\r\n\r\nexport default function Spinner(props: any) {    \r\n    let history = useHistory()\r\n    useEffect(() =>{\r\n        setTimeout(() =>{\r\n            let path: string = props && props.path\r\n            if(path !== undefined)\r\n                history.push(path)\r\n\r\n            if(props && props.logoutCb)\r\n                MockDao.logout()\r\n                //props.logoutCb(null)\r\n        }, 2000)\r\n    },[props, history])\r\n\r\n    let title: string = props && props.title\r\n    \r\n    return (        \r\n        <div className=\"Spinner\"><h2>{title}</h2>\r\n            <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n            </div>        \r\n        </div>\r\n    )\r\n}","import { Fragment } from \"react\";\r\nimport './RequestCreateForm.css'\r\n\r\nexport default function RequestCreateLine(props:any) {\r\n    return(\r\n        <Fragment>\r\n            <tr key={props.id}>\r\n                <td>{props.date}</td>\r\n                <td>{props.expense}</td>\r\n                <td className='enMoney'>{props.amount}</td>\r\n                <td><span onClick={props.handleSubmit} id={props.id}>x</span></td>\r\n            </tr>\r\n        </Fragment>\r\n    )\r\n}","import { Fragment } from \"react\"\r\nimport './DateBadge.css'\r\n\r\nexport default function DateBadge(props: any) {\r\n    const getElement = () => {\r\n        let date = new Date(props.date)\r\n        try {\r\n            return(\r\n            <span className=\"entry-date\">\r\n                <span className=\"month\">{ date.toLocaleString('default', { month: 'short' }) }</span>\r\n                <span className=\"day\">{date.getDay()}</span>\r\n                <span className=\"year\">{date.getFullYear()}</span>\r\n            </span>\r\n            )\r\n        }catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n        {getElement()}\r\n        </Fragment>\r\n    )\r\n}","import { useEffect, useState, Fragment } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport MockDao from \"../../MockDao/MockDao\";\r\nimport Spinner from \"../Spinner\";\r\nimport RequestCreateLine from '../RequestCreate/RequestCreateLine'\r\nimport './RequestReview.css'\r\nimport DateBadge from \"../DateBadge/DateBadge\";\r\n\r\nexport default function RequestReview() {\r\n    let { id } = useParams< {id: string} >()\r\n    const [result, setResult] = useState< {result: string} >()\r\n\r\n    useEffect(() => {\r\n        // let getId = id || props.id \r\n        \r\n        // console.log(getId)\r\n\r\n        // if(getId === undefined) getId = \"609779b0c3cd0c295d3c3c17\"\r\n\r\n        MockDao.getDao(setResult, {req: id})\r\n\r\n        //let data = MockDao.getDummyRequest()\r\n        //@ts-ignore\r\n        //setResult(data)\r\n        //MockDao.getObject(setResult, MockDao.getDummyRequest);\r\n    }, [id])\r\n\r\n    const getApprovalForm = (request: any) => {\r\n        if(request.status === 'pending')\r\n            return (\r\n                <div><form className='reviewForm'>\r\n                <button className='button'>{'Approve'}</button>\r\n                <button className='button'>{'Deny'}</button>\r\n                </form></div>            \r\n            )\r\n        else\r\n            return (\r\n                <div className='requestReviewer'>\r\n                    <h4>Reviewer: {request.reviewerId}</h4>\r\n                </div>\r\n            )\r\n    }\r\n\r\n    // from RequestCreateForm\r\n    const getItems = () => {\r\n        let elements: any = []\r\n\r\n        //console.log(result)\r\n\r\n        try{\r\n            //@ts-ignore\r\n            let request = result[0]\r\n            let expenses = request.expenses\r\n\r\n            expenses.forEach( (e: any, i: number) => {\r\n                let formatDate = new Date(e.date).toLocaleDateString('en-US', {timeZone: 'UTC'})\r\n                let value = parseInt(e.amount)\r\n                let formatAmt = (value * 0.01).toFixed(2)\r\n                elements.push(<RequestCreateLine id={i+1} date={formatDate} expense={e.expense} amount={formatAmt} />)\r\n            })            \r\n            \r\n            //@ts-ignore\r\n            let total = Number(request.total)\r\n            let formatTotal = (total * 0.01).toFixed(2)\r\n            return (\r\n                <Fragment>\r\n                \r\n                <table><thead><tr><th>Requester</th><th>Status</th><th>Dates</th></tr></thead>\r\n                <tbody>\r\n\r\n                <tr key={0}><td>{request.requesterId}</td><td>{request.status}</td>\r\n                <td className='dateRange'><DateBadge date={request.startDate}/><DateBadge date={request.endDate}/></td></tr>\r\n\r\n                </tbody>\r\n                </table>\r\n\r\n                <hr/>\r\n\r\n                <table><thead><tr><th>Date</th><th>Expense</th><th>Amount</th></tr></thead><tbody>\r\n                {elements}\r\n                <tr key={expenses.length+1}><td></td><td></td><td className='enMoney'>{formatTotal}</td></tr>\r\n                </tbody></table>\r\n\r\n                <hr/>\r\n                {getApprovalForm(request)}\r\n                </Fragment>\r\n            )            \r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n\r\n        return (<div></div>)\r\n    }\r\n\r\n    return (    \r\n        <div className='RequestReview'>\r\n            {\r\n                Object.keys(result === undefined || result).length === 0 ?\r\n                <Spinner /> \r\n                : \r\n                getItems()\r\n            }\r\n        </div>\r\n    );\r\n}","import './RequestsViewAllListEntry.css'\r\nimport { Fragment, useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport DateBadge from '../DateBadge/DateBadge'\r\n\r\nexport default function RequestsViewAllListEntry(props: any) {\r\n    let history = useHistory()\r\n    let request = useRef()\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLElement>) => {\r\n        const target = e.target as HTMLElement\r\n        //console.log(target)\r\n        const id = target.innerHTML\r\n        if (target.id === 'req') {\r\n            history.push({\r\n                pathname: '/RequestReview/' + id\r\n            })\r\n        }\r\n        //pathname: '/RequestReview/' + id\r\n        if (target.id === 'emp') {\r\n            history.push({\r\n                pathname: '/RequestViewByEmployee/' + id\r\n            })\r\n        }\r\n    }\r\n\r\n    const getTableLine = () => {\r\n\r\n        if (props === undefined || !props.isOwner) {\r\n            return (\r\n                <Fragment>\r\n                    <tr key={props.id} onClick={handleClick}>\r\n                        {/*//@ts-ignore */}\r\n                        <td ref={request} id={'req'} className='linkRef'>{props.data.hexId}</td>\r\n                        <td>{props.data.status}</td>\r\n                        <td><p className=\"enMoney\">{\r\n                            (props.data.total / 100).toFixed(2)\r\n                        }</p></td>\r\n                        <td className='dateRange'>\r\n                        <DateBadge date={props.data.startDate} />\r\n                        <DateBadge date={props.data.endDate} />\r\n                        </td>\r\n                        {/*//@ts-ignore */}\r\n                        <td ref={request} id={'emp'} className='linkRef'>{props.data.requesterId}</td>\r\n                    </tr>\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <tr key={props.id} onClick={handleClick}>\r\n                        {/*//@ts-ignore */}\r\n                        <td ref={request} id={'req'} className='linkRef'>{props.data.hexId}</td>\r\n                        <td>{props.data.status}</td>\r\n                        <td><p className=\"enMoney\">{\r\n                            (props.data.total / 100).toFixed(2)\r\n                        }</p></td>\r\n                        <td>[{props.data.startDate}]-[{props.data.endDate}]</td>\r\n                    </tr>\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {getTableLine()}\r\n        </Fragment>\r\n    )\r\n}","import {Fragment, useState} from \"react\"\r\nimport MockDao from \"../../MockDao/MockDao\"\r\nimport RequestsViewAllListEntry from \"./RequestsViewAllListEntry\"\r\nimport './RequestsViewAllListEntry.css'\r\n\r\nexport default function RequestsViewAllList(props: any) {\r\n    const [owner] = useState(props.empId !== undefined && props.empId === MockDao.getCurrentUserId())\r\n\r\n    const getTitle = () => {\r\n        if(!owner)\r\n            return (<h3>requester: {props.empId}</h3>)    \r\n    }\r\n\r\n    const requestData = () => {\r\n        if(!owner)\r\n            return(<th>Requester</th>)\r\n    }\r\n\r\n    const getItems = () => {\r\n        const items:any = [];\r\n        //@ts-ignore\r\n        props.data.forEach( (element, index) => {\r\n            //console.log(element)\r\n            //@ts-ignore\r\n            items.push(<RequestsViewAllListEntry data={element} key={index+1} callback={handleClick} isOwner={owner}/>)\r\n        }) \r\n        return(\r\n            <Fragment>\r\n            {getTitle()}\r\n            <table><thead>\r\n            <tr key={0}>\r\n                <th>Id</th>                \r\n                <th>Status</th>\r\n                <th>Total</th>\r\n                <th>Dates</th>\r\n                {requestData()}\r\n            </tr></thead><tbody>\r\n            {items}\r\n            </tbody></table>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const handleClick = (formdata: any) => {\r\n        console.log(formdata)\r\n    }\r\n\r\n    return (        \r\n        <div className='RequestsViewAllList'>\r\n            {getItems()}\r\n        </div>\r\n    );\r\n}","function handleSearch(evt: any, sourcedata: any, setResultCb: any, isUser: boolean){\r\n        \r\n    const { value } = typeof(evt.target) === 'number' ? evt.target.toString() : evt.target\r\n    let filtered = sourcedata\r\n\r\n    if(value.length > 0 && value.length < 3) {\r\n        setResultCb(filtered)\r\n        return;\r\n    }\r\n\r\n    let expr = new RegExp('^\\\\b' + value)\r\n    //@ts-ignore\r\n    filtered = sourcedata.filter( e => {\r\n        \r\n        // destructuring and property shorthand, get subset of properties we want to search\r\n        const properties = getPropList(isUser, e)\r\n        const results = Object.values(properties).filter(val => expr.test(val))\r\n        return results.length > 0\r\n    })\r\n\r\n    setResultCb(filtered)\r\n}\r\n\r\nfunction getPropList(user: boolean, e: any) {\r\n    if(user === true)\r\n        return (({id, firstName, lastName, email, phone, address} = e) => ({id, firstName, lastName, email, phone, address}))(e)\r\n    return (({id, status, requester} = e) => ({id, status, requester}))(e)\r\n}\r\n\r\nexport default handleSearch;","import { Fragment, useEffect, useState } from \"react\";\r\nimport MockDao from \"../../MockDao/MockDao\";\r\nimport RequestsViewAllList from \"./RequestsViewAllList\";\r\nimport Spinner from '../Spinner'\r\nimport { useParams } from \"react-router-dom\";\r\nimport handleSearch from '../../SearchEntries'\r\n\r\nexport default function RequestsViewAll() {\r\n    let { id } = useParams< {id: string} >()\r\n    let { empFlag } = useParams< {empFlag: string} >()\r\n\r\n    const [reinbursements, setResult] = useState([])\r\n    const [reinbursementsDisplay, setResultDisplay] = useState([])\r\n\r\n    useEffect(() => {\r\n        //console.log(id + \" \" + empFlag)\r\n        if(empFlag !== undefined) {\r\n            MockDao.getDao(setData, {empReq: id})\r\n        }\r\n        else\r\n            MockDao.getDao(setData, {req: id})\r\n        //MockDao.getObject(setResult, MockDao.getDummyRequests)\r\n    }, [id, empFlag])\r\n\r\n    const setData = (data: any) =>{\r\n        setResult(data)\r\n        setResultDisplay(data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"RequestsViewAll\">      \r\n        { Object.keys(reinbursements === undefined || reinbursements).length === 0 ? <Spinner /> \r\n        : \r\n        <Fragment>\r\n            <input type='text' placeholder={'Filter...'} onChange={ e => handleSearch(e, reinbursements, setResultDisplay, false)} ></input>\r\n            <RequestsViewAllList data={reinbursementsDisplay} empId={empFlag ? id : undefined}/>\r\n        </Fragment>\r\n        }\r\n        </div>\r\n    );\r\n}","import { Fragment, useRef, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './EmployeesViewListEntry.css'\r\n\r\nexport default function EmployeesViewListEntry(props: any) {\r\n\r\n    let history = useHistory()   \r\n    let entry = useRef()\r\n    let showRow = useState(true || props?.hide)\r\n\r\n    const handleClick = () => {\r\n        //@ts-ignore\r\n        let id = entry.current.innerHTML\r\n        //console.log(id)\r\n\r\n        //@todo goto emp requests\r\n        history.push({\r\n            pathname: '/RequestsViewAll/' + id\r\n            //pathname: '/EmployeeView/' + id\r\n        })\r\n    }\r\n\r\n    function formatPhoneNumber(phoneNumberString: string) {\r\n        //@ts-ignore\r\n        let cleaned = ('' + phoneNumberString).replace(/\\D/g, '');\r\n        console.log(cleaned)\r\n        let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\r\n        \r\n        if (match) {\r\n          return '(' + match[1] + ') ' + match[2] + '-' + match[3];\r\n        }\r\n        return phoneNumberString;\r\n      }\r\n\r\n    return(\r\n        <Fragment>            \r\n            {showRow && <tr key={props.id} onClick={handleClick}>\r\n                    {/*//@ts-ignore */}\r\n                    <td ref={entry} className='linkRef'>{props.data.hexId}</td>\r\n                    <td>{props.data.firstName}</td>\r\n                    <td>{props.data.lastName}</td>                    \r\n                    <td>{props.data.email}</td>\r\n                    <td>{formatPhoneNumber(props.data.phoneNumber)}</td>\r\n                    <td>{props.data.address}</td>\r\n                    <td>{props.data.type}</td>\r\n            </tr>}\r\n        </Fragment>\r\n    )\r\n}","import EmployeesViewListEntry from './EmployeesViewListEntry'\r\n\r\nexport default function EmployeesViewList(props: any) {\r\n    /*\r\n    let history = useHistory()    \r\n\r\n    const handleClick = (event: any) => {\r\n        console.log(event)\r\n\r\n        \r\n        history.push({\r\n            pathname: '/EmployeeView',\r\n        })\r\n    }*/\r\n\r\n    const getItems = () => {\r\n        //console.log(props.data)\r\n        const items: any = [];\r\n\r\n        //if(props.data.length === undefined)\r\n            //items.push(<EmployeeLine data={props.data} id={0} callback={handleClick}/>)\r\n\r\n        //@ts-ignore\r\n        var i:number;\r\n        for(i = 0; i<props.data.length; i++) {\r\n            let d = props.data[i]\r\n            //console.log(d)\r\n            items.push(<EmployeesViewListEntry data={d} key={i+1} />)\r\n            //items.push(<EmployeesViewListEntry data={d} key={i} callback={handleClick}/>)\r\n        }\r\n\r\n        return (\r\n            <table><thead>\r\n                <tr key={0}>\r\n                    <th>Id</th>\r\n                    <th>First Name</th>\r\n                    <th>Last Name</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Address</th>\r\n                    <th>Type</th>\r\n                </tr></thead><tbody>\r\n            {items}\r\n            </tbody></table>      \r\n        )\r\n    }\r\n\r\n    return (        \r\n        <div className='EmployeesViewList'>\r\n            {getItems()}\r\n        </div>\r\n    );\r\n}","import { Fragment, useEffect, useState } from \"react\"\r\nimport MockDao from \"../../MockDao/MockDao\"\r\nimport EmployeesViewList from \"./EmployeesViewList\"\r\nimport Spinner from \"../Spinner\"\r\nimport handleSearch from '../../SearchEntries'\r\n\r\nexport default function EmployeesView(props: any) {\r\n\r\n    const [employees, setResult] = useState([])\r\n    const [employeesDisplay, setResultDisplay] = useState([])\r\n\r\n    useEffect(() => {\r\n        MockDao.getDao(setData, {emp: \"all\"})\r\n    }, [])\r\n\r\n    const setData = (loadedEmployees: any) => {\r\n        setResult(loadedEmployees)\r\n        setResultDisplay(loadedEmployees)\r\n    }\r\n\r\n    return (\r\n        <div className=\"EmployeesView\">      \r\n            { Object.keys(employees === undefined || employees).length === 0 ? \r\n            <Spinner /> : \r\n            <Fragment>\r\n                <input type='text' placeholder={'Filter...'} onChange={ e => handleSearch(e, employees, setResultDisplay, true)} ></input>\r\n                <EmployeesViewList data={employeesDisplay}/> \r\n            </Fragment>\r\n            }\r\n        </div>\r\n    )\r\n}","import './EmployeeCreateForm.css';\r\nimport {MouseEvent, useRef} from 'react';\r\nimport Spinner from '../Spinner'\r\n\r\nexport default function EmployeeCreateForm(props: any) {\r\n\r\n    const formDetails = useRef(null);\r\n\r\n    const handleClick = (evt: MouseEvent) => {\r\n        evt.preventDefault();\r\n        //@ts-ignore\r\n        const textInputs = [...formDetails.current].filter(element => element.type === \"text\" && element.value.length > 0);\r\n        let results = {}\r\n        Object.values(textInputs).forEach( val => {\r\n            //@ts-ignore\r\n            results[val.id] = val.value;\r\n        });\r\n\r\n        try {\r\n            props.handleSubmit(results);\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const getView = () => {\r\n        if(Object.keys(props.data === undefined || props.data === null || props.data).length === 0)\r\n            return <Spinner/>\r\n\r\n        let title = (props.title === undefined) ? 'ModelView' : props.title;\r\n        return (\r\n            //@ts-ignore\r\n            <form ref={formDetails} onSubmit={handleClick} autocomplete=\"off\"><fieldset><legend>{title}</legend>\r\n            { \r\n                Object.entries(props.data).map(([key, val], index) => {\r\n                    let keyName = key.charAt(0).toUpperCase() + key.replace( /([A-Z])/g, \" $1\" ).slice(1)\r\n\r\n                    let inputType = 'text'\r\n                    let pattern = '.*'\r\n                    switch(key){\r\n                        case 'email':\r\n                            inputType = 'email'\r\n                        break;\r\n                        case 'phoneNumber':\r\n                            inputType = 'tel'\r\n                            pattern='[0-9]{10}'\r\n                        break;\r\n                    }\r\n                    \r\n                    return ( \r\n                        //@ts-ignore\r\n                        <span key={index}>             \r\n                        <input type={inputType} id={key} name={key} defaultValue={''} placeholder={keyName} pattern={pattern} required/>\r\n                        </span>\r\n                    );\r\n                }) \r\n            } \r\n            <button type='submit'>Submit</button>\r\n            </fieldset></form>\r\n        );        \r\n    }\r\n\r\n    return (\r\n        <div className='EmployeeCreateForm'>\r\n            { getView() }\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport MockDao from \"../../MockDao/MockDao\"\r\nimport Employee from \"../../Model/Employee\"\r\nimport Manager from \"../../Model/Manager\"\r\nimport EmployeeCreateForm from './EmployeeCreateForm'\r\n\r\nexport default function EmployeeCreate(props:any) {\r\n    let history = useHistory()\r\n\r\n    const [newUser, setResult] = useState<Employee | Manager>()\r\n\r\n    useEffect(() => {\r\n        let e = MockDao.getNewEmployee()\r\n        removeAtributes(e)\r\n        setResult(e)\r\n        //MockDao.getObject(setResult, MockDao.getNewEmployee(removeAtributes), removeAtributes)\r\n        // remove data not required\r\n    }, [])\r\n\r\n    //@todo move to dao/service\r\n    function removeAtributes(x: any) {\r\n        delete x.password\r\n        delete x.requestIds\r\n        delete x.id\r\n        delete x.type\r\n    }\r\n\r\n    function validate(formdata: object) {\r\n        //parse phone\r\n        //@ts-ignore\r\n        formdata.phoneNumber = parseInt(formdata.phoneNumber)\r\n\r\n        //post: either create or update\r\n        let command = {command: 'create'}\r\n        let cmdType = {cmdType: 'employee'}\r\n        formdata = {...formdata, ...command, ...cmdType}\r\n\r\n        MockDao.postDao(handleResult, formdata)\r\n    }\r\n\r\n    function handleResult(results: object) {\r\n        console.log(results)\r\n        history.push({\r\n            pathname: '/Success',\r\n            state: { detail: 'Created Employee'}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"EmployeeCreate\">\r\n            <EmployeeCreateForm data={newUser} handleSubmit={validate} title={'Create Employee'} blank={true}/>\r\n        </div>\r\n    )\r\n}","import './ModelView.css';\r\nimport {MouseEvent, useRef} from 'react';\r\nimport Spinner from '../Spinner'\r\n\r\nexport default function ModelView(props: any) {\r\n\r\n    const formDetails = useRef(null);\r\n\r\n    const handleClick = (evt: MouseEvent) => {\r\n        evt.preventDefault();\r\n        //@ts-ignore\r\n        const textInputs = [...formDetails.current].filter(element => element.type === \"text\" && element.value.length > 0);\r\n        let results = {}\r\n        //Object.entries(textInputs).map( ([key, val]) => {\r\n        Object.values(textInputs).forEach( val => {\r\n            //@ts-ignore\r\n            results[val.id] = val.value;\r\n        });\r\n\r\n        try {\r\n            props.handleSubmit(results);\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const getView = () => {\r\n        //console.log(props)\r\n        \r\n        if(Object.keys(props.data === undefined || props.data === null || props.data).length === 0)\r\n            return <Spinner/>\r\n\r\n        let title = (props.title === undefined) ? 'ModelView' : props.title;\r\n        return (\r\n            //@ts-ignore\r\n            <form ref={formDetails} autocomplete=\"off\" onSubmit={handleClick}><fieldset><legend>{title}</legend>\r\n            { \r\n                Object.entries(props.data).map(([key, val], index) => {\r\n                    let keyName = key.charAt(0).toUpperCase() + key.replace( /([A-Z])/g, \" $1\" ).slice(1);\r\n\r\n                    //@ts-ignore\r\n                    let value:string = val\r\n\r\n                    let disabledInput = true\r\n                    switch(key){\r\n                        case 'firstName':\r\n                        case 'lastName':\r\n                        case 'address':\r\n                        case 'phoneNumber':\r\n                            disabledInput = false\r\n                            break\r\n                    }\r\n\r\n                    if(props && props.blank){\r\n                        return ( \r\n                            //@ts-ignore\r\n                            <span key={index}>\r\n                            <label htmlFor={key}>{keyName}</label>                            \r\n                            <input type='text' id={key} name={key} disabled={disabledInput}/>\r\n                            </span>\r\n                        );                        \r\n                    }else{\r\n                        return ( \r\n                            //@ts-ignore\r\n                            <span key={index}>\r\n                            <label htmlFor={key}>{keyName}</label>                            \r\n                            <input type='text' id={key} name={key} defaultValue={value} disabled={disabledInput}/>\r\n                            </span>\r\n                        );\r\n                    }\r\n                }) \r\n            } \r\n            <button type='submit'>Submit</button>\r\n            </fieldset></form>\r\n        );        \r\n    }\r\n\r\n    return (\r\n        <div className='ModelView'>\r\n            { getView() }\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MockDao from '../../MockDao/MockDao';\r\nimport ModelView from \"../ModelView/ModelView\";\r\nimport './ProfileView.css';\r\n\r\nexport default function ProfileView() {\r\n    let history = useHistory()\r\n    \r\n    const [result, setResult] = useState< {result: string} >()\r\n\r\n    useEffect(() => {\r\n        const isMgr = MockDao.getIsManager()\r\n        const id = MockDao.getCurrentUserId() // props.id\r\n\r\n        if(isMgr)\r\n            MockDao.getDao(removeFields, {mgr: id})\r\n        else\r\n            MockDao.getDao(removeFields, {emp: id})\r\n    }, [])\r\n\r\n    function removeFields(profileData: any) {\r\n        delete profileData.requestIds\r\n        delete profileData.password\r\n        delete profileData.id\r\n        delete profileData.hexId        \r\n        setResult(profileData)\r\n    }\r\n\r\n    function validate(results: object): void {\r\n        //console.log(results)\r\n\r\n        // check employee create request data\r\n        // make requestIds not empty\r\n        //@ts-ignore\r\n        if(results.requestIds === undefined)\r\n            //@ts-ignore\r\n            results.requestIds = []\r\n\r\n        //@ts-ignore\r\n        if(results.id === undefined)\r\n            //@ts-ignore\r\n            results.id = {}\r\n\r\n        //@ts-ignore\r\n        results.phoneNumber = parseInt(results.phoneNumber)\r\n\r\n        //------------------------------------------------------------------------\r\n        //@todo add support for manager\r\n\r\n        // append update tag\r\n        let command = {command: 'update'}        \r\n        let cmdType = {cmdType: 'employee'}\r\n        results = {...results, ...command, ...cmdType}\r\n\r\n        MockDao.postDao(handleResult, results)\r\n    }\r\n\r\n    function handleResult(results: object) {\r\n        console.log(results)\r\n        history.push({\r\n            pathname: '/ProfileViewUpdateSuccess/Success',\r\n            //state: { detail: 'Employee'}\r\n        })\r\n    }\r\n\r\n    return (    \r\n        //@ts-ignore\r\n        <div className='ProfileView'>\r\n            <ModelView data={result} handleSubmit={validate} title={'Profile'}/>\r\n        </div>\r\n    );\r\n}","import { useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MockDao from '../../MockDao/MockDao'\r\nimport './PasswordReset.css'\r\n\r\nexport default function PasswordReset() {\r\n    const minLen = 8\r\n    const pass = useRef<HTMLInputElement>(null)\r\n    const confirm = useRef<HTMLInputElement>(null)\r\n    const form = useRef<HTMLFormElement>(null)\r\n    let history = useHistory()\r\n\r\n    const handleClick = (evt: React.FormEvent) => {\r\n        evt.preventDefault()\r\n\r\n        let confirmPass = confirm?.current?.value\r\n        let match: boolean | null = (pass?.current?.value === confirmPass)\r\n\r\n        if(!match) {\r\n            alert('passwords do not match')\r\n            form?.current?.reset()\r\n        }\r\n\r\n        let data:  {[k: string]: any} = {}\r\n        data['command'] = 'updatePass'\r\n        data['cmdType'] = MockDao.getIsManager() ? 'manager' : 'employee'\r\n        data['password'] = confirmPass\r\n        data['id'] = MockDao.getCurrentUserId()\r\n\r\n        MockDao.postDao(displayResult, data)\r\n    }\r\n\r\n    const displayResult = (res: any) => {\r\n        console.log(res)\r\n            history.push({ \r\n                pathname: '/Success', \r\n                state: { detail: 'Updated Password'}\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"PasswordReset\">\r\n            <form ref={form} onSubmit={e => handleClick(e)}>\r\n                <div>\r\n                    <label htmlFor=\"password\">New Password<br/><small>(8 characters minimum)</small></label>\r\n                    <input ref={pass} type=\"password\" id=\"password\" minLength={minLen} autoComplete=\"new-password\" required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"passwordconfirm\">Confirm Password</label>\r\n                    <input ref={confirm} type=\"password\" id=\"passwordconfirm\" minLength={minLen} autoComplete=\"new-password\" required/>\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import { useEffect, useRef, useState } from \"react\"\r\nimport RequestCreateLine from './RequestCreateLine'\r\nimport './RequestCreateForm.css'\r\n\r\nexport default function RequestCreateForm(props) {\r\n    const dateInput = useRef()\r\n    const textInput = useRef()\r\n    const amountInput = useRef()\r\n    const formRef = useRef()\r\n\r\n    const [listItems, setItems] = useState({})\r\n    const [total, setTotal] = useState(0)\r\n    const [startDate, setStartDate] = useState(null)\r\n    const [endDate, setEndDate] = useState(null)\r\n\r\n    const [listSize, setSize] = useState(0)\r\n\r\n    //const entryArray = useRef(new Object()) cannot add (readonly?)\r\n\r\n    \r\n    useEffect(()=>{\r\n\r\n        //console.log(props)\r\n        \r\n        if(props && props.data && props.data.length > 0) {\r\n            let expensesList = props.data[0].expenses\r\n            let readExpense = []\r\n            expensesList.forEach(e => {\r\n                console.log(e)\r\n\r\n                let entry = {\r\n                    expense: e.expense,\r\n                    amount: parseInt(e.amount),\r\n                    date: e.date\r\n                }\r\n\r\n                readExpense.push(entry)\r\n            })\r\n\r\n            // this creates a link of states\r\n            setItems( {listItems: readExpense} )\r\n            setTotal(props.data[0].total)\r\n            setSize(expensesList.length)      \r\n            \r\n            //console.log(listItems)\r\n        }\r\n\r\n    },[props, listItems])\r\n\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        let values = getValues()\r\n        if(values === undefined || values.length === 0)\r\n        {\r\n            alert('Please fill out expenses')            \r\n            return;\r\n        }\r\n        let object = {\r\n            expenses: values,\r\n            total: total,\r\n            startDate: startDate,\r\n            endDate: endDate\r\n        }\r\n        props.handleSubmit(object)\r\n    }\r\n\r\n    const addItem = (entry) => {\r\n        if(formRef.current.checkValidity() === false) {\r\n            formRef.current.reportValidity()\r\n            return\r\n        }\r\n            \r\n\r\n        if(entry.expense.length === 0)\r\n        {\r\n            alert('Please enter an expense.')\r\n            return;\r\n        }\r\n\r\n        if(new Date(entry.date).getTime() > new Date().getTime())\r\n        {\r\n            alert('Please select a valid date.')\r\n            return;\r\n        }        \r\n\r\n        // set date range\r\n        if(startDate === null) {\r\n            setStartDate(entry.date)\r\n        } else if(new Date(entry.date).getTime() < new Date(startDate).getTime()) {\r\n            setStartDate(entry.date)\r\n        }\r\n\r\n        if(endDate === null) {\r\n            setEndDate(entry.date)\r\n        } else if (new Date(entry.date).getTime() > new Date(endDate).getTime()) {\r\n            setEndDate(entry.date)\r\n        }     \r\n\r\n        if(isNaN(entry.amount))\r\n        {\r\n            alert('Please enter an amount.')\r\n            return;\r\n        }        \r\n\r\n        entry.amount = parseFloat(entry.amount).toFixed(2) * 100\r\n\r\n        console.log(entry.amount)\r\n\r\n        if(entry.amount < 1)\r\n        {\r\n            alert('Please enter an amount.')\r\n            return;\r\n        }        \r\n\r\n        setTotal(total + entry.amount)\r\n\r\n        // this creates a link of states\r\n        setItems( {listItems: {...listItems, ...entry}} )\r\n        setSize(listSize + 1)\r\n\r\n        //@ts-ignore\r\n        console.log(listItems)      \r\n    }\r\n\r\n    const handleAddClick = (event) => {\r\n        //event.stopPropagation()\r\n        event.preventDefault()\r\n        \r\n        let entry = {\r\n            expense: textInput.current.value,\r\n            amount: amountInput.current.value,\r\n            date: dateInput.current.value || dateInput.current.defaultValue\r\n        }\r\n\r\n        addItem(entry)\r\n    }\r\n\r\n    const getValues = () => {\r\n        // reverse the listItems linked list\r\n        const stack = [];\r\n        const items = [];                \r\n        let listNode = listItems.listItems\r\n        while(listNode !== undefined) {\r\n            stack.push( {date: listNode.date, expense: listNode.expense, amount: listNode.amount} )\r\n            listNode = listNode.listItems\r\n        }\r\n        while(stack.length > 0)\r\n            items.push(stack.pop())\r\n\r\n        return items;\r\n    }\r\n\r\n    const removeEntry = (spanObj) => {\r\n    //     let index = spanObj.target.id\r\n    //     let indexInvert = listSize - index - 1\r\n\r\n    //     // build a new new list\r\n    //     let listNode = listItems\r\n    //     let newList = null\r\n    //     while(listNode !== undefined) {\r\n    //         if(listNode.id != indexInvert)\r\n    //         {\r\n    //         if(newList === null)\r\n    //             newList = listNode\r\n    //         else\r\n    //             newList.listItems = listNode\r\n    //         }   \r\n\r\n    //         listNode = listNode.listItems\r\n    //     }\r\n\r\n    //     console.log(listItems)\r\n    //     console.log(newList)\r\n    //     setItems(newList)\r\n    }\r\n\r\n    const getItems = () => {\r\n        let items = getValues()\r\n        \r\n        let elements = []\r\n\r\n        items.forEach( (e, i) => {\r\n            let formatDate = new Date(e.date).toLocaleDateString('en-US', {timeZone: 'UTC'})\r\n            let formatAmt = e.amount * 0.01\r\n            elements.push(<RequestCreateLine id={i+1} date={formatDate} expense={e.expense} amount={formatAmt} handleSubmit={removeEntry}/>)\r\n        })\r\n\r\n        let formatTotal = (total * 0.01).toFixed(2)\r\n        let finalEntryKey = items.length+2\r\n        return (\r\n            <table><thead><tr key={0}><th>Date</th><th>Expense</th><th>Amount</th></tr></thead><tbody>\r\n            {elements}\r\n            <tr key={finalEntryKey}><td></td><td></td><td className='enMoney'>{formatTotal}</td></tr>\r\n            </tbody></table>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"RequestCreateForm\">\r\n            <form ref={formRef} onSubmit={handleSubmit} autocomplete=\"off\"><fieldset>\r\n                <ul>\r\n                <li><input ref={dateInput} type=\"date\" id=\"dateInput\" defaultValue={new Date().toISOString().split('T')[0]}/></li>\r\n                <li><input ref={textInput} type=\"text\" id=\"textInput\" placeholder='Expense...' required/></li>\r\n                <li><input ref={amountInput} type=\"number\" id=\"amountInput\" min=\"0.01\" step=\"0.01\" placeholder='Cost...' required/></li>\r\n                </ul>\r\n                <button className='btnAdd' onClick={handleAddClick}>Add</button>\r\n            </fieldset>\r\n\r\n            { getItems() }\r\n\r\n            <button type='submit' className='btnSubmit'>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport MockDao from \"../../MockDao/MockDao\"\r\nimport RequestCreateForm from \"./RequestCreateForm\"\r\n\r\nexport default function RequestCreate(props:any) {\r\n    //let { id } = useParams< {id: string} >()\r\n\r\n    let history = useHistory()\r\n\r\n    const [request, setResult] = useState()\r\n\r\n    useEffect(() => {\r\n        //console.log(\"get empty\")\r\n        MockDao.getObject(setResult, MockDao.getNewRequest, removeAtributes)\r\n\r\n        // remove data not required\r\n        //console.log(request)\r\n    }, [])\r\n\r\n    function removeAtributes(x: any) {\r\n        delete x.requester\r\n        delete x.status\r\n        delete x.startDate\r\n        delete x.endDate\r\n        delete x.id\r\n        delete x.total\r\n    }\r\n\r\n    function validate(formdata: object) {\r\n        console.log(formdata)\r\n\r\n        //post: create \r\n        var command = {command: 'create'}\r\n        var cmdType = {cmdType: 'request'}\r\n        formdata = {...formdata, ...command, ...cmdType}\r\n\r\n        console.log(formdata)\r\n\r\n        MockDao.postDao(handleResult, formdata)        \r\n    }\r\n\r\n    function handleResult(results: object) {\r\n        console.log(results)\r\n        history.push({\r\n            pathname: '/Success',\r\n            state: { detail: 'Request'}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"RequestCreate\">\r\n            <RequestCreateForm data={request} handleSubmit={validate} title={'Create Request'}/>\r\n        </div>\r\n    )\r\n}","import { useLocation } from \"react-router-dom\"\r\n\r\ninterface stateType {\r\n    detail: { pathname: string }\r\n}\r\n\r\nexport default function Success() {\r\n    const location = useLocation<stateType>()\r\n    return (\r\n        <div className='Success'>\r\n            <h1>Successully {location.state.detail}</h1>\r\n        </div>\r\n    )\r\n}","import { useParams } from \"react-router-dom\"\r\n\r\nexport default function ProfileViewUpdateSuccess() {\r\n    //@ts-ignore\r\n    let { status } = useParams()\r\n\r\n    return (\r\n        <div className='ProfileViewUpdateSuccess'>\r\n            <h1>Successully Updated {status}</h1>\r\n        </div>\r\n    )\r\n}","import Spinner from \"../Spinner\"\r\n\r\nexport default function Logout(props:any) {\r\n    return (\r\n        <div className=\"Logout\">\r\n            <Spinner title={'Logging Out...'} path={'/'} logoutCb={props.logoutCb}/>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport MockDao from \"../../MockDao/MockDao\"\r\nimport RequestsViewAllList from \"../RequestsViewAll/RequestsViewAllList\"\r\n\r\n// duplicate of RequestViewAll\r\nexport default function RequestViewByEmployee(props: any) {\r\n\r\n    let { id } = useParams< {id: string} >()\r\n\r\n    const [reinbursements, setResult] = useState()\r\n\r\n    useEffect(() => {\r\n        MockDao.getDao(setResult, {empReq: id})\r\n\r\n    }, [id])\r\n\r\n    return (\r\n        <div className=\"RequestViewByEmployee\">      \r\n        { //@ts-ignore\r\n        Object.keys(reinbursements === undefined || reinbursements).length === 0 ? <div>No Requests</div>\r\n        //@ts-ignore\r\n        : <RequestsViewAllList data={reinbursements} empId={id} loggedId={props.id}/>\r\n        }\r\n        </div>\r\n    );\r\n}","export default function NoRequests(){\r\n    return(\r\n        <div className=\"NoRequests\"><h2>No Requests</h2></div>\r\n    )\r\n}","import {Switch, Route} from \"react-router-dom\";\r\nimport SidebarManager from './SidebarManager/SidebarManager';\r\nimport RequestReview from './RequestReview/RequestReview';\r\nimport RequestsViewAll from './RequestsViewAll/RequestsViewAll';\r\nimport EmployeesView from './EmployeesView/EmployeesView';\r\nimport EmployeeCreate from './EmployeeCreate/EmployeeCreate';\r\n//import RequestsView from './RequestCreate/RequestsView/RequestsView';\r\n\r\nimport ProfileView from './ProfileView/ProfileView';\r\nimport PasswordReset from './PasswordReset/PasswordReset';\r\nimport RequestCreate from './RequestCreate/RequestCreate';\r\nimport Success from './Success';\r\nimport EmployeeViewUpdateSuccess from './ProfileView/ProfileViewUpdateSuccess';\r\nimport Logout from \"./Logout/Logout\";\r\nimport RequestViewByEmployee from \"./RequestViewByEmployee/RequestViewByEmployee\";\r\nimport NoRequests from \"./NoRequests\";\r\nimport './Home.css';\r\nimport {Fragment} from 'react';\r\n\r\nexport default function ManagerHome(props:any) {   \r\n    return (\r\n        <Fragment>\r\n        <SidebarManager user={props.user}/>\r\n        <div className=\"ManagerHome\">\r\n            <Switch>\r\n            <Route path='/RequestViewByEmployee/:id' component={()=><RequestViewByEmployee id={props.user}/>}/>\r\n            <Route path='/RequestsViewAll/:id' component={RequestsViewAll}/>\r\n            <Route path='/RequestReview/:id' component={RequestReview}/>\r\n            <Route path='/EmployeesView' component={EmployeesView}/>\r\n            \r\n            <Route path='/EmployeeCreate' component={EmployeeCreate}/>\r\n            \r\n            <Route path='/ProfileView' component={()=> <ProfileView/>}/>\r\n            <Route path='/PasswordReset' component={PasswordReset}/>\r\n            <Route path='/RequestCreate' component={() => <RequestCreate/>}/>\r\n            <Route path='/Success' component={Success}/>\r\n            <Route path='/EmployeeViewUpdateSuccess/:status' component={EmployeeViewUpdateSuccess}/>\r\n            <Route path='/Logout' component={()=> <Logout logoutCb={props.logoutCb}/>} />\r\n            <Route path='/NoRequests' component={NoRequests}/>\r\n            </Switch>\r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n//<Route path='/RequestsView' component={()=> <RequestsView hexid={'609779b0c3cd0c295d3c3c17'}/>}/>","import {Switch, Route} from \"react-router-dom\";\r\nimport Sidebar from './Sidebar/Sidebar';\r\n\r\nimport ProfileView from './ProfileView/ProfileView';\r\nimport PasswordReset from './PasswordReset/PasswordReset';\r\nimport RequestCreate from './RequestCreate/RequestCreate';\r\nimport Success from './Success';\r\nimport EmployeeViewUpdateSuccess from './ProfileView/ProfileViewUpdateSuccess';\r\nimport Logout from \"./Logout/Logout\";\r\n\r\nimport RequestsViewAll from './RequestsViewAll/RequestsViewAll';\r\nimport RequestViewByEmployee from \"./RequestViewByEmployee/RequestViewByEmployee\";\r\nimport NoRequests from \"./NoRequests\";\r\nimport './Home.css';\r\nimport {Fragment} from 'react';\r\n\r\nexport default function EmployeeHome(props:any) {\r\n    return (\r\n        <Fragment>\r\n        <Sidebar user={props.user}/>        \r\n        <div className=\"EmployeeHome\">\r\n        \r\n            <Switch>            \r\n                <Route path='/RequestViewByEmployee/:id' component={()=><RequestViewByEmployee id={props.user}/>}/>\r\n                <Route path='/RequestsViewAll/:id' component={RequestsViewAll}/>\r\n                <Route path='/ProfileView' component={()=> <ProfileView/>}/>\r\n\r\n                <Route path='/PasswordReset' component={PasswordReset}/>\r\n                <Route path='/RequestCreate' component={RequestCreate}/>\r\n                <Route path='/Success' component={Success}/>\r\n                <Route path='/EmployeeViewUpdateSuccess/:status' component={EmployeeViewUpdateSuccess}/>\r\n                <Route path='/Logout' component={()=> <Logout logoutCb={props.logoutCb}/>} />\r\n                <Route path='/NoRequests' component={NoRequests}/>\r\n            </Switch>            \r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n//<Route path='/RequestsViewAll/:id/:empFlag' component={RequestsViewAll}/>","import {useState, useRef} from 'react';\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Login from './Components/Login/Login';\r\nimport ManagerHome from './Components/ManagerHome';\r\nimport EmployeeHome from './Components/EmployeeHome';\r\nimport MockDao from \"./MockDao/MockDao\"\r\nimport './App.css';\r\n\r\nconst useConstructor = (callback = () => {}) => {\r\n  const called = useRef(false)\r\n  if(called) return\r\n  callback()\r\n  called.current = true\r\n}\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null)\r\n  useConstructor(() => {\r\n    console.log('once before render')\r\n  })\r\n    \r\n  MockDao.setLogOutCallback(setUser)\r\n\r\n  const getHome = () => {\r\n    \r\n    if(user === null)\r\n      return <Login callback={setUser}/>    \r\n\r\n    return user.type === \"Manager\" ? \r\n      <ManagerHome user={user.id} logoutCb={setUser}/> \r\n    : <EmployeeHome user={user.id} logoutCb={setUser}/>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Route path='/'>\r\n        { getHome() }\r\n        </Route>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}